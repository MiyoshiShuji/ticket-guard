name: Infra (Bicep) What-if & Deploy

on:
  pull_request:
    paths:
      - 'infra/**.bicep'
      - 'infra/**.json'
      - '.github/workflows/infra-deploy.yml'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Set true to apply (create/update) after successful what-if'
        required: false
        default: 'false'
      template:
        description: 'Template to deploy (rg-only | subscription | skip)'
        required: false
        default: 'subscription'

env:
  # Central parameters (location fixed for PoC; adjust if you move regions later)
  LOCATION: japaneast
  PARAMETERS_FILE: infra/parameters.poc.json
  RG_ONLY_TEMPLATE: infra/rg-only.bicep
  SUBSCRIPTION_TEMPLATE: infra/deploy.subscription.bicep
  # Keep secret out of the parameters file â€“ override at runtime.
  RESOURCE_GROUP_NAME: poc-ticket-guard-rg

concurrency:
  group: infra-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write   # Required for OIDC federated auth to Azure
  contents: read

jobs:
  what-if:
    name: What-if (Plan)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI Version
        run: az version

      - name: Decide template
        id: choose
        run: |
          # Decide which template to evaluate
            # workflow_dispatch input overrides; for PR default to subscription wrapper.
          INPUT_TEMPLATE='${{ github.event.inputs.template }}'
          if [ -z "$INPUT_TEMPLATE" ]; then INPUT_TEMPLATE='subscription'; fi
          case "$INPUT_TEMPLATE" in
            rg-only)
              echo "template_path=$RG_ONLY_TEMPLATE" >> $GITHUB_OUTPUT;
              echo "scope=sub" >> $GITHUB_OUTPUT;
              ;;
            subscription)
              echo "template_path=$SUBSCRIPTION_TEMPLATE" >> $GITHUB_OUTPUT;
              echo "scope=sub" >> $GITHUB_OUTPUT;
              ;;
            skip)
              echo "template_path=SKIP" >> $GITHUB_OUTPUT;
              ;;
            *)
              echo "Unknown template input: $INPUT_TEMPLATE" >&2; exit 1;
              ;;
          esac

      - name: What-if (subscription scope)
        if: steps.choose.outputs.template_path != 'SKIP' && steps.choose.outputs.scope == 'sub'
        run: |
          set -eux
          # Inject signingSecret securely (parameters file value ignored)
          SIGNING_SECRET_PARAM="signingSecret=${{ secrets.SIGNING_SECRET }}"
          az deployment sub what-if \
            --name ci-whatif-${{ github.run_id }} \
            --location $LOCATION \
            --template-file "${{ steps.choose.outputs.template_path }}" \
            --parameters @$PARAMETERS_FILE $SIGNING_SECRET_PARAM

      - name: Summarize
        if: always()
        run: |
          echo "### What-if completed" >> $GITHUB_STEP_SUMMARY
          echo "Template: ${{ steps.choose.outputs.template_path }}" >> $GITHUB_STEP_SUMMARY
          echo "Deploy requested: ${{ github.event.inputs.deploy }}" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Apply (Deploy)
    needs: what-if
    if: >-
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.deploy == 'true'
    runs-on: ubuntu-latest
    environment: poc
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy (subscription wrapper)
        run: |
          set -eux
          az deployment sub create \
            --name ci-deploy-${{ github.run_id }} \
            --location $LOCATION \
            --template-file $SUBSCRIPTION_TEMPLATE \
            --parameters @$PARAMETERS_FILE signingSecret=${{ secrets.SIGNING_SECRET }}

      - name: Output Function Endpoint
        run: |
          FUNC_NAME=$(az deployment sub show --name ci-deploy-${{ github.run_id }} --query 'properties.outputs.functionAppName.value' -o tsv || true)
          if [ -n "$FUNC_NAME" ]; then
            URL=$(az functionapp show -n "$FUNC_NAME" -g $RESOURCE_GROUP_NAME --query defaultHostName -o tsv || true)
            if [ -n "$URL" ]; then
              echo "Function URL: https://$URL" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Post-Deploy Reminder
        run: |
          echo "### Next Step" >> $GITHUB_STEP_SUMMARY
          echo "Add principalId output to main.bicep, then introduce Key Vault in a later workflow revision." >> $GITHUB_STEP_SUMMARY

# =======================
# Setup Instructions (README inline snippet):
# 1. Create an Azure AD app (or use existing) and assign at least Contributor on subscription.
# 2. Configure a Federated Credential in Entra ID (subject: repo:${OWNER}/${REPO}:ref:refs/heads/main OR environment) for OIDC.
# 3. Add repository secrets: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID, SIGNING_SECRET.
# 4. Run workflow_dispatch with deploy=false first (plan only). Then rerun with deploy=true.
# 5. Later: split plan & apply, add Key Vault module, remove plain secret parameter once vault adopted.
# =======================
