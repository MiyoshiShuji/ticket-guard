name: Deploy to Azure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod
  push:
    branches:
      - main
    paths:
      - 'functions/**'
      - 'infra/**'
      - '.github/workflows/deploy.yml'

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required to read repository contents

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './functions'
  PYTHON_VERSION: '3.11'

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    outputs:
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}
      functionAppUrl: ${{ steps.deploy.outputs.functionAppUrl }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Bicep template
      id: deploy
      uses: azure/arm-deploy@v2
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.AZURE_RESOURCE_GROUP }}
        template: ./infra/main.bicep
        parameters: >
          appBaseName=${{ secrets.APP_BASENAME }}
          environment=${{ github.event.inputs.environment || 'prod' }}
          signingSecret=${{ secrets.SIGNING_SECRET }}
        failOnStdErr: false

    - name: Output deployment results
      run: |
        echo "Function App Name: ${{ steps.deploy.outputs.functionAppName }}"
        echo "Function App URL: ${{ steps.deploy.outputs.functionAppUrl }}"

  deploy-function:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies and run tests
      run: |
        cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pytest -v --maxfail=1
        mypy .

    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ needs.deploy-infrastructure.outputs.functionAppName }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        python-version: ${{ env.PYTHON_VERSION }}

  verify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-function]
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Function Key
      id: get-key
      run: |
        FUNCTION_KEY=$(az functionapp keys list \
          --name ${{ needs.deploy-infrastructure.outputs.functionAppName }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query "functionKeys.default" \
          --output tsv)
        echo "::add-mask::$FUNCTION_KEY"
        echo "function-key=$FUNCTION_KEY" >> $GITHUB_OUTPUT

    - name: Test Function Endpoint
      run: |
        RESPONSE=$(curl -s -w "\n%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -d '{"ticketId": "TEST-001", "deviceId": "github-actions-test"}' \
          "${{ needs.deploy-infrastructure.outputs.functionAppUrl }}/api/issue-token?code=${{ steps.get-key.outputs.function-key }}")
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "HTTP Status: $HTTP_CODE"
        echo "Response Body: $BODY"
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "‚ùå Function endpoint test failed with status $HTTP_CODE"
          exit 1
        fi
        
        echo "‚úÖ Function endpoint test passed"
        echo "üîó Function URL: ${{ needs.deploy-infrastructure.outputs.functionAppUrl }}/api/issue-token"
        echo "üîë Function Key: ${{ steps.get-key.outputs.function-key }}"